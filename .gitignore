import matplotlib.pyplot as plt
import numpy as np
from tabulate import tabulate
import math

while True:
    max_points = input("Was ist die maximale Punktezahl? ")
    if max_points.isdigit() and int(max_points) > 0:
        break
    print("Bitte geben Sie eine positive ganze Zahl ein.")
max_points = int(max_points)

while True:
    geschenkte_punkte = input("Wie viele Punkte möchten Sie schenken? ")
    if geschenkte_punkte.isdigit() and int(geschenkte_punkte) > 0:
        break
    print("Bitte geben Sie eine positive ganze Zahl ein.")
geschenkte_punkte = int(geschenkte_punkte)


# lineare Funktion definieren für normale Bewertungsskala
m1 = (6-1)/max_points  # Steigung
b1 = 1  # y-Achsenabschnitt
f1 = lambda x: m1*x + b1

# lineare Funktion definieren für Bewertungsskala mit der Note 6 bei x Punkten
x2 = max_points - geschenkte_punkte  # x-Wert, an dem die Note 6 erreicht werden soll
m2 = 5/x2  # Steigung
b2 = 1  # y-Achsenabschnitt
f2 = lambda x: np.where(x <= x2, m2*x + b2, 6)

# lineare Funktion definieren für Parallele Verschiebung der Bewertungsskala
m3 = m1  # Steigung
b3 = 6 - m1*x2  # y-Achsenabschnitt
f3 = lambda x: m3*x + b3

# x-Werte (Punkte) von 0 bis 100 generieren
punkte = np.arange(0, max_points+1)

# y-Werte (Noten) mit den Funktionen berechnen
noten1 = f1(punkte)
noten2 = f2(punkte)
noten3 = f3(punkte)

# Diagramm erstellen
plt.plot(punkte, noten1, label='erreichte Punktzahl ÷ maximale Punktzahl × 5 + 1')
plt.plot(punkte, noten2, label='Note 6 bei ' + str(x2) + ' Punkten angesetzt')
plt.plot(punkte, noten3, label='Parallele Verschiebung')
plt.xlabel('Erreichte Punkte')
plt.ylabel('Erreichte Note')
plt.title('Punkte-Note-Verhältnis')
plt.legend()

# x- und y-Achsenbeschränkungen setzen
plt.xlim(0, max_points)
plt.ylim(1, 6)

# horizontale Linie bei y=f1(x=80) ziehen
plt.plot([0, x2], [f1(x2), f1(x2)], linestyle='--', color='gray')

# senkrechte Linie bei x=80 ziehen
plt.plot([x2, x2], [1, f1(x2)], linestyle='--', color='gray')
plt.plot([x2, x2], [1, 6], linestyle='--', color='gray')

# Bereich zwischen blauer und grüner Kurve füllen
plt.fill_between(punkte, noten1, noten2, where=(punkte<=x2), color='lightyellow')

# Bereich zwischen orangefarbener und grüner Kurve füllen
plt.fill_between(punkte, f3(punkte), noten2, where=(punkte<=x2), color='lightyellow')

# Diagramm anzeigen
plt.show()





x_values = np.arange(0, max_points+1, int(max_points/10))
f1_values = [round(f1(x), 2) for x in x_values]
f2_values = np.round(f2(np.array(x_values)), 2)
f3_values = [round(f3(x), 2) for x in x_values]

table_data = []
for i in range(len(x_values)):
    x = x_values[i]
    f1_val = f1_values[i]
    f2_val = f2_values[i]
    f3_val = f3_values[i]
    
    if f3_val > 6:
        f3_val = 6
    
    table_data.append([math.ceil(x), f1_val, f2_val, f3_val])
    
    # Überprüfe, ob die letzte Zeile hinzugefügt werden soll
    if i == len(x_values)-1 and f1_val != 6:
        table_data.append([max_points, '6.00', '6.00', '6.00'])

headers = ['Erreichte Punkte', 'erreichte Punktzahl ÷ maximale Punktzahl × 5 + 1', f'Note 6 bei {x2} Punkten angesetzt', 'Parallele Verschiebung']
table = tabulate(table_data, headers=headers, floatfmt=".2f", tablefmt="fancy_grid")
print(table)



# Extrahieren der x- und y-Daten und Konvertierung der Werte in numerische Werte
x_data = [float(row[1]) for row in table_data]
y_data = [float(row[2]) - float(row[1]) for row in table_data]

# Erstellen des Diagramms
fig, ax = plt.subplots()
ax.plot(x_data, y_data)

# Beschriftungen hinzufügen
ax.set_xlabel("Note")
ax.set_ylabel("Geschenkte Teilnote")
ax.set_title(f"Geschenkte Teilnote bei Note 6 bei {x2} Punkten angesetzt")

# Diagramm anzeigen
plt.show()


# Extrahieren der x- und y-Daten und Konvertierung der Werte in numerische Werte
x_data = [float(row[1]) for row in table_data]
y_data = [float(row[3]) - float(row[1]) for row in table_data]

# Erstellen des Diagramms
fig, ax = plt.subplots()
ax.plot(x_data, y_data)

# Beschriftungen hinzufügen
ax.set_xlabel("Note")
ax.set_ylabel("Geschenkte Teilnote")
ax.set_title("Geschenkte Teilnote bei paralleler Verschiebung")

# Diagramm anzeigen
plt.show()
